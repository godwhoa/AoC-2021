package day16

import (
	"testing"
)

const TEST_INPUT = ``

func TestSumAllVersions(t *testing.T) {
	tests := []struct {
		name       string
		hexstring  string
		wantSummed uint64
	}{
		{
			name:       "Sample 1",
			hexstring:  "8A004A801A8002F478",
			wantSummed: 16,
		},
		{
			name:       "Sample 2",
			hexstring:  "620080001611562C8802118E34",
			wantSummed: 12,
		},
		{
			name:       "Sample 3",
			hexstring:  "C0015000016115A2E0802F182340",
			wantSummed: 23,
		},
		{
			name:       "Sample 4",
			hexstring:  "A0016C880162017C3686B18A3D4780",
			wantSummed: 31,
		},
		{
			name:       "Input",
			hexstring:  TEST_INPUT,
			wantSummed: 945,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotSummed := SumAllVersions(tt.hexstring); gotSummed != tt.wantSummed {
				t.Errorf("SumAllVersions() = %v, want %v", gotSummed, tt.wantSummed)
			}
		})
	}
}

func TestEvalute(t *testing.T) {
	tests := []struct {
		name       string
		hexstring  string
		wantEvaled uint64
	}{
		{
			name:       "Sample 1",
			hexstring:  "C200B40A82",
			wantEvaled: 3,
		},
		{
			name:       "Sample 2",
			hexstring:  "04005AC33890",
			wantEvaled: 54,
		},
		{
			name:       "Sample 3",
			hexstring:  "880086C3E88112",
			wantEvaled: 7,
		},
		{
			name:       "Sample 4",
			hexstring:  "CE00C43D881120",
			wantEvaled: 9,
		},
		{
			name:       "Sample 5",
			hexstring:  "D8005AC2A8F0",
			wantEvaled: 1,
		},
		{
			name:       "Sample 6",
			hexstring:  "9C005AC2F8F0",
			wantEvaled: 0,
		},
		{
			name:       "Sample 7",
			hexstring:  "9C0141080250320F1802104A08",
			wantEvaled: 1,
		},
		{
			name:       "Input",
			hexstring:  TEST_INPUT,
			wantEvaled: 10637009915279,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotEvaled := Evalute(tt.hexstring); gotEvaled != tt.wantEvaled {
				t.Errorf("Evalute() = %v, want %v", gotEvaled, tt.wantEvaled)
			}
		})
	}
}
